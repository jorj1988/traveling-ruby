#!/bin/bash
set -e

SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$SELFDIR/internal/reset_environment.sh"
source "$SELFDIR/../shared/library.sh"
BUNDLER_VERSION=`cat "$SELFDIR/../BUNDLER_VERSION.txt"`

WORKDIR=
OWNS_WORKDIR=true

RUNTIME_DIR=
OUTPUT_DIR=
CONCURRENCY=4
GEMFILE="$SELFDIR/../shared/Gemfile"
SETUP_SOURCE=true
COMPILE=true

function _cleanup()
{
	if $OWNS_WORKDIR && [[ "$WORKDIR" != "" ]]; then
		echo "Removing working directory $WORKDIR"
		rm -rf "$WORKDIR"
	fi
}

function create_environment_file() {
	local FILE="$1"
	local LOAD_PATHS=`/tmp/ruby/bin.real/ruby "$SELFDIR/../shared/dump-load-paths.rb"`
	cat > "$FILE" <<'EOF'
#!/bin/bash
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`

echo ORIG_DYLD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"
echo ORIG_TERMINFO=\"$TERMINFO\"
echo ORIG_SSL_CERT_DIR=\"$SSL_CERT_DIR\"
echo ORIG_SSL_CERT_FILE=\"$SSL_CERT_FILE\"
echo ORIG_RUBYOPT=\"$RUBYOPT\"
echo ORIG_RUBYLIB=\"$RUBYLIB\"

echo TERMINFO=/usr/share/terminfo
echo SSL_CERT_FILE=\"$ROOT/lib/ca-bundle.crt\"
echo RUBYOPT=\"-r$ROOT/lib/restore_environment\"
echo GEM_HOME=\"$ROOT/lib/ruby/gems/2.1.0\"
echo GEM_PATH=\"$ROOT/lib/ruby/gems/2.1.0\"
EOF
	cat >> "$FILE" <<EOF
echo RUBYLIB=\"$LOAD_PATHS\"

echo export ORIG_DYLD_LIBRARY_PATH
echo export ORIG_TERMINFO
echo export ORIG_SSL_CERT_DIR
echo export ORIG_SSL_CERT_FILE
echo export ORIG_RUBYOPT
echo export ORIG_RUBYLIB

echo unset  DYLD_LIBRARY_PATH
echo export TERMINFO
echo unset  SSL_CERT_DIR
echo export SSL_CERT_FILE
echo export RUBYOPT
echo export GEM_HOME
echo export GEM_PATH
echo export RUBYLIB
EOF
	chmod +x "$FILE"
}

function create_wrapper()
{
	local FILE="$1"
	local NAME="$2"
	local IS_RUBY_SCRIPT="$3"

	cat > "$FILE" <<'EOF'
#!/bin/bash
set -e
ROOT=`dirname "$0"`
ROOT=`cd "$ROOT/.." && pwd`
eval "`\"$ROOT/bin/ruby_environment\"`"
EOF
	if $IS_RUBY_SCRIPT; then
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/ruby" "\$ROOT/bin.real/$NAME" "\$@"
EOF
	else
		cat >> "$FILE" <<EOF
exec "\$ROOT/bin.real/$NAME" "\$@"
EOF
	fi
	chmod +x "$FILE"
}

function usage()
{
	echo "Usage: ./build [options] <RUNTIME DIR> <OUTPUT DIR>"
	echo "Build Traveling Ruby binaries."
	echo
	echo "Options:"
	echo "  -E       Do not setup source"
	echo "  -C       Do not compile Ruby"
	echo "  -G       Do not install gems"
	echo
	echo "  -w DIR   Use the given working directory instead of creating a temporary one"
	echo "  -j NUM   Compilation concurrency. Default: 4"
	echo "  -g PATH  Build gems as specified by the given Gemfile"
	echo "  -h       Show this help"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "ECGw:j:g:h" opt; do
		case "$opt" in
		E)
			SETUP_SOURCE=false
			;;
		C)
			COMPILE=false
			;;
		G)
			GEMFILE=
			;;
		w)
			WORKDIR="$OPTARG"
			OWNS_WORKDIR=false
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		g)
			GEMFILE="$OPTARG"
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	RUNTIME_DIR="$1"
	OUTPUT_DIR="$2"

	if [[ "$RUNTIME_DIR" = "" || "$OUTPUT_DIR" = "" ]]; then
		usage
		exit 1
	fi
	if [[ ! -e "$RUNTIME_DIR" ]]; then
		echo "ERROR: $RUNTIME_DIR doesn't exist."
		exit 1
	fi
	if [[ ! -e "$OUTPUT_DIR" ]]; then
		echo "ERROR: $OUTPUT_DIR doesn't exist."
		exit 1
	fi
}

parse_options "$@"
RUNTIME_DIR="`cd \"$RUNTIME_DIR\" && pwd`"
OUTPUT_DIR="`cd \"$OUTPUT_DIR\" && pwd`"
if [[ "$WORKDIR" = "" ]]; then
	WORKDIR=`mktemp -d /tmp/traveling-ruby.XXXXXXXX`
elif [[ ! -e "$WORKDIR" ]]; then
	echo "ERROR: working directory $WORKDIR doesn't exist."
	exit 1
else
	WORKDIR="`cd \"$WORKDIR\" && pwd`"
fi
if [[ "$GEMFILE" != "" ]]; then
	GEMFILE="`absolute_path \"$GEMFILE\"`"
fi
if [[ -e ~/.bundle/config ]]; then
	echo "ERROR: ~/.bundle/config detected. Global Bundler configuration" \
		"could conflict with this build script, so please remove" \
		"~/.bundle/config first."
	exit 1
fi


#######################################


RUBY_MAJOR_MINOR=2.2
RUBY_VERSION=2.2.0


header "Preparing Ruby source code..."

export PATH="$RUNTIME_DIR/bin:$PATH"
export LIBRARY_PATH="$RUNTIME_DIR/lib"
export DYLD_FALLBACK_LIBRARY_PATH="$RUNTIME_DIR/lib"
export PKG_CONFIG_PATH="$RUNTIME_DIR/lib/pkgconfig:/usr/lib/pkgconfig"
export RUNTIME_DIR
export DEAD_STRIP=false

echo "Entering working directory $WORKDIR"
pushd "$WORKDIR" >/dev/null

if $SETUP_SOURCE; then
	run rm -rf "ruby-$RUBY_VERSION"
	run tar xzf "$RUNTIME_DIR/ruby.tar.gz"
fi
echo "Entering ruby-$RUBY_VERSION"
pushd "ruby-$RUBY_VERSION" >/dev/null
echo


if $SETUP_SOURCE; then
	header "Configuring..."
	./configure \
		--prefix /tmp/ruby \
		--enable-shared \
		--disable-install-doc \
		--disable-install-rdoc \
		--disable-install-capi \
		--with-out-ext=tk,sdbm,gdbm,dbm,dl,coverage \
		--with-openssl-dir="$RUNTIME_DIR"
	echo
fi


if $COMPILE; then
	header "Compiling..."
	run make -j$CONCURRENCY exts.mk
	run make -j$CONCURRENCY
	echo
fi


header "Installing to temporary build output directory..."
run rm -rf /tmp/ruby
run make install-nodoc
echo


header "Postprocessing build output..."

# Copy over various useful files.
run cp -pR "$RUNTIME_DIR"/lib/*.dylib* /tmp/ruby/lib/
run cp "$SELFDIR/internal/restore_environment.rb" /tmp/ruby/lib/
run cp "$SELFDIR/../shared/ca-bundle.crt" /tmp/ruby/lib/
export SSL_CERT_FILE=/tmp/ruby/lib/ca-bundle.crt

# Dump various information about the Ruby binaries.
RUBY_COMPAT_VERSION=`/tmp/ruby/bin/ruby -rrbconfig -e 'puts RbConfig::CONFIG["ruby_version"]'`
GEM_PLATFORM=`/tmp/ruby/bin/ruby -e 'puts Gem::Platform.local.to_s'`
GEM_EXTENSION_API_VERSION=`/tmp/ruby/bin/ruby -e 'puts Gem.extension_api_version'`
run mkdir /tmp/ruby/info
echo "+ Dumping information about the Ruby binaries into /tmp/ruby/info"
echo $RUBY_COMPAT_VERSION > /tmp/ruby/info/RUBY_COMPAT_VERSION
echo $GEM_PLATFORM > /tmp/ruby/info/GEM_PLATFORM
echo $GEM_EXTENSION_API_VERSION > /tmp/ruby/info/GEM_EXTENSION_API_VERSION

# Remove some standard dummy gems. We must do this before
# installing further gems in order to prevent accidentally
# removing explicitly gems.
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/{test-unit,rdoc}-*

if [[ "$GEMFILE" != "" ]]; then
	# Restore cached gems.
	if [[ -e "$RUNTIME_DIR/vendor" ]]; then
		run cp -pR "$RUNTIME_DIR/vendor" /tmp/ruby/vendor
	fi

	# Install Bundler, either from cache or directly.
	if [[ -e "$RUNTIME_DIR/vendor/cache/bundler-$BUNDLER_VERSION.gem" ]]; then
		run /tmp/ruby/bin/gem install "$RUNTIME_DIR/vendor/cache/bundler-$BUNDLER_VERSION.gem" --no-rdoc --no-ri
	else
		run /tmp/ruby/bin/gem install bundler -v $BUNDLER_VERSION --no-rdoc --no-ri
	fi

	# Run bundle install.
	run cp "$GEMFILE" /tmp/ruby/
	if [[ -e "$GEMFILE.lock" ]]; then
		run cp "$GEMFILE.lock" /tmp/ruby/
	fi
	echo "+ Entering /tmp/ruby"
	pushd /tmp/ruby >/dev/null
	run /tmp/ruby/bin/bundle config --local build.nokogiri ""
	run /tmp/ruby/bin/bundle config --local build.mysql2 "--with-mysql_config"
	run /tmp/ruby/bin/bundle config --local build.charlock_holmes "--with-icu-dir=$RUNTIME_DIR"
	run /tmp/ruby/bin/bundle install --system --retry 3
	run /tmp/ruby/bin/bundle package
	run rm -rf "$RUNTIME_DIR/vendor"
	run mv vendor "$RUNTIME_DIR/"
	run cp /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/cache/bundler-$BUNDLER_VERSION.gem "$RUNTIME_DIR/vendor/cache/"
	run rm -rf Gemfile* .bundle
	echo "+ Leaving /tmp/ruby"
	popd >/dev/null
fi

# Strip binaries and remove unnecessary files.
run strip -S /tmp/ruby/bin/ruby
echo "+ Stripping libraries..."
(
	set -o pipefail
	find /tmp/ruby -name '*.bundle' | xargs strip -S
	find /tmp/ruby -name '*.dylib' | xargs strip -S
)
if [[ $? != 0 ]]; then
	exit
fi
run rm /tmp/ruby/bin/{erb,rdoc,ri}
run rm -rf /tmp/ruby/share
run rm -rf /tmp/ruby/lib/{libruby-static.a,pkgconfig}
run rm -f /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/cache/*
run rm -f /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/extensions/$GEM_PLATFORM/$GEM_EXTENSION_API_VERSION/*/{gem_make.out,mkmf.log}
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/*/{test,spec,*.md,*.rdoc}
run rm -rf /tmp/ruby/lib/ruby/gems/$RUBY_COMPAT_VERSION/gems/*/ext/*/*.{c,h}

# Create wrapper scripts.
run mv /tmp/ruby/bin /tmp/ruby/bin.real
run mkdir /tmp/ruby/bin
run create_environment_file /tmp/ruby/bin/ruby_environment

run create_wrapper /tmp/ruby/bin/ruby ruby false
run create_wrapper /tmp/ruby/bin/gem gem true
run create_wrapper /tmp/ruby/bin/irb irb true
run create_wrapper /tmp/ruby/bin/rake rake true
if $INSTALL_GEMS; then
	run create_wrapper /tmp/ruby/bin/bundle bundle true
	run create_wrapper /tmp/ruby/bin/bundler bundler true
fi

echo


header "Sanity checking build output..."
bash "$SELFDIR/internal/sanity_check" /tmp/ruby
echo


header "Committing build output..."
shopt -s dotglob
run rm -rf "$OUTPUT_DIR"/*
run mv /tmp/ruby/* "$OUTPUT_DIR"/
run rm -rf /tmp/ruby
echo

header "All done!"
